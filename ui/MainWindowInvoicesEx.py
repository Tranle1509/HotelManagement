import json
from datetime import datetime
from PyQt6.QtWidgets import QMainWindow, QTableWidgetItem, QMessageBox


from libs.FileFactory import JsonFileFactory
from model.Booking import Booking
from model.Customer import Customer
from model.Room import Room
from ui.MainWindowInvoices import Ui_MainWindow


class MainWindowInvoicesEx(QMainWindow, Ui_MainWindow):
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.MainWindow = MainWindow
        self.rooms = []
        self.customers = []
        self.bookings = []

    def __init__(self, selected_room_code,customer_code, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.customer_code = customer_code
        self.selected_room_code = selected_room_code
        self.customer_filename = "../../dataset/customers.json"
        self.booking_filename = "../../dataset/bookings.json"
        self.room_filename = "../../dataset/rooms.json"
        self.jff = JsonFileFactory()
        self.load_data()
        self.load_invoice_data()
        self.pushButton_export.clicked.connect(self.export_invoice)

    def load_json(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ {file_path}: {e}")
            return []

    def load_invoice_data(self):
        """T·∫£i d·ªØ li·ªáu h√≥a ƒë∆°n d·ª±a tr√™n room_code v√† customer_code"""
        booking = next((b for b in self.bookings if b.room_code == self.selected_room_code), None)

        if booking is None:
            QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng!")
            return  # Tho√°t kh·ªèi h√†m n·∫øu kh√¥ng c√≥ booking h·ª£p l·ªá

        # T√¨m kh√°ch h√†ng v√† ph√≤ng
        customer = next((c for c in self.customers if c.customer_code == self.customer_code), None)
        room = next((r for r in self.rooms if r.room_code == booking.room_code), None)

        # Hi·ªÉn th·ªã th√¥ng tin kh√°ch h√†ng n·∫øu t√¨m th·∫•y
        if customer:
            self.lineEdit_customer.setText(customer.customer_name)  # üîπ S·ª≠ d·ª•ng thu·ªôc t√≠nh thay v√¨ key dict

        # C·∫≠p nh·∫≠t th√¥ng tin booking v√†o giao di·ªán
        self.lineEdit_bookingcode.setText(booking.customer_code)  # üîπ Truy xu·∫•t ƒë√∫ng thu·ªôc t√≠nh
        self.lineEdit_issuedate.setText(datetime.today().strftime("%Y-%m-%d"))

        # Chuy·ªÉn ƒë·ªïi ng√†y th√°ng t·ª´ string v·ªÅ datetime
        start_date = datetime.strptime(booking.start_date, "%Y/%m/%d")
        end_date = datetime.strptime(booking.end_date, "%Y/%m/%d")

        # T√≠nh s·ªë ng√†y ·ªü
        self.lineEdit_numberofdays.setText(str((end_date - start_date).days))

        # Hi·ªÉn th·ªã th√¥ng tin ph√≤ng n·∫øu t√¨m th·∫•y
        if room:
            self.tableWidget_invoices.setRowCount(1)
            self.tableWidget_invoices.setItem(0, 0, QTableWidgetItem("1"))
            self.tableWidget_invoices.setItem(0, 1, QTableWidgetItem(room.room_type))
            self.tableWidget_invoices.setItem(0, 2, QTableWidgetItem("1"))
            self.tableWidget_invoices.setItem(0, 3, QTableWidgetItem("100"))  # Gi√° t·∫°m th·ªùi
            self.tableWidget_invoices.setItem(0, 4, QTableWidgetItem(booking.start_date))
            self.tableWidget_invoices.setItem(0, 5, QTableWidgetItem(booking.end_date))

    def calculate_total(self):
        """T√≠nh t·ªïng ti·ªÅn h√≥a ƒë∆°n d·ª±a tr√™n lo·∫°i ph√≤ng"""
        subtotal = 0.0
        tax_rate = 0.1  # Thu·∫ø VAT 10%

        for row in range(self.tableWidget_invoices.rowCount()):
            try:
                room_type = self.tableWidget_invoices.item(row, 1).text() if self.tableWidget_invoices.item(row,
                                                                                                            1) else ""

                # X√°c ƒë·ªãnh gi√° theo lo·∫°i ph√≤ng
                if room_type == "Regular":
                    price = 1_000_000
                elif room_type == "VIP":
                    price = 9_000_000
                else:
                    price = 0  # N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i ph√≤ng

                # L·∫•y s·ªë l∆∞·ª£ng ng√†y ·ªü
                days = int(self.lineEdit_numberofdays.text()) if self.lineEdit_numberofdays.text().isdigit() else 1

                total = price * days  # T·ªïng ti·ªÅn cho ph√≤ng ƒë√≥
                subtotal += total

                # C·∫≠p nh·∫≠t v√†o b·∫£ng
                self.tableWidget_invoices.setItem(row, 2, QTableWidgetItem(str(days)))
                self.tableWidget_invoices.setItem(row, 3, QTableWidgetItem(str(price)))
                self.tableWidget_invoices.setItem(row, 4, QTableWidgetItem(str(total)))

            except ValueError:
                QMessageBox.warning(self, "L·ªói", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra s·ªë ng√†y v√† lo·∫°i ph√≤ng.")
                return

        tax = subtotal * tax_rate  # T√≠nh thu·∫ø
        total_price = subtotal + tax  # T·ªïng ti·ªÅn sau thu·∫ø

        # Hi·ªÉn th·ªã l√™n giao di·ªán
        self.lineEdit_citprice.setText(f"{subtotal:,.0f} VND")
        self.lineEdit_tax.setText(f"{tax:,.0f} VND")
        self.lineEdit_totalprice.setText(f"{total_price:,.0f} VND")

    def export_invoice(self):
        """Xu·∫•t h√≥a ƒë∆°n ra file PDF"""
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        pdf.set_font("Arial", "B", 16)

        # Ti√™u ƒë·ªÅ
        pdf.cell(200, 10, "H√ìA ƒê∆†N THANH TO√ÅN", ln=True, align="C")
        pdf.ln(10)

        # Th√¥ng tin kh√°ch h√†ng
        pdf.set_font("Arial", "", 12)
        pdf.cell(50, 10, f"Kh√°ch h√†ng: {self.lineEdit_customer.text()}", ln=True)
        pdf.cell(50, 10, f"M√£ ƒë·∫∑t ph√≤ng: {self.lineEdit_bookingcode.text()}", ln=True)
        pdf.cell(50, 10, f"Ng√†y xu·∫•t h√≥a ƒë∆°n: {self.lineEdit_issuedate.text()}", ln=True)
        pdf.cell(50, 10, f"S·ªë ng√†y ·ªü: {self.lineEdit_numberofdays.text()} ng√†y", ln=True)
        pdf.ln(5)

        # B·∫£ng chi ti·∫øt h√≥a ƒë∆°n
        pdf.set_fill_color(200, 200, 200)
        pdf.cell(30, 10, "STT", 1, 0, "C", True)
        pdf.cell(50, 10, "Lo·∫°i ph√≤ng", 1, 0, "C", True)
        pdf.cell(30, 10, "S·ªë ng√†y", 1, 0, "C", True)
        pdf.cell(40, 10, "Gi√°/ng√†y (VND)", 1, 0, "C", True)
        pdf.cell(40, 10, "Th√†nh ti·ªÅn", 1, 1, "C", True)

        pdf.set_font("Arial", "", 12)
        for row in range(self.tableWidget_invoices.rowCount()):
            pdf.cell(30, 10, str(row + 1), 1, 0, "C")
            pdf.cell(50, 10, self.tableWidget_invoices.item(row, 1).text(), 1, 0, "C")
            pdf.cell(30, 10, self.tableWidget_invoices.item(row, 2).text(), 1, 0, "C")
            pdf.cell(40, 10, self.tableWidget_invoices.item(row, 3).text(), 1, 0, "C")
            pdf.cell(40, 10, self.tableWidget_invoices.item(row, 4).text(), 1, 1, "C")

        # T·ªïng ti·ªÅn
        pdf.ln(5)
        pdf.cell(100, 10, "T·ªïng ti·ªÅn tr∆∞·ªõc thu·∫ø:", 0, 0)
        pdf.cell(40, 10, self.lineEdit_citprice.text(), 0, 1, "R")

        pdf.cell(100, 10, "Thu·∫ø (10%):", 0, 0)
        pdf.cell(40, 10, self.lineEdit_tax.text(), 0, 1, "R")

        pdf.cell(100, 10, "T·ªïng ti·ªÅn thanh to√°n:", 0, 0, "B")
        pdf.cell(40, 10, self.lineEdit_totalprice.text(), 0, 1, "RB")

        # L∆∞u file PDF
        file_path = "D:/demo/dataset/invoice.pdf"
        try:
            pdf.output(file_path)
            QMessageBox.information(self, "Xu·∫•t h√≥a ƒë∆°n", f"H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {file_path}")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u h√≥a ƒë∆°n: {e}")
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ JSON v√† c·∫≠p nh·∫≠t b·∫£ng."""
        self.customers = self.jff.read_data(self.customer_filename, Customer) or []
        self.bookings = self.jff.read_data(self.booking_filename, Booking) or []
        self.rooms = self.jff.read_data(self.room_filename, Room) or []

