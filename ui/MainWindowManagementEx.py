import json
import os
from datetime import datetime

import numpy as np
import pandas as pd
from PyQt6.QtCore import QDate, Qt
from PyQt6.QtGui import QColor, QBrush
from PyQt6.QtWidgets import QMainWindow, QHeaderView, QMessageBox, QTableWidgetItem, QInputDialog
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import seaborn as sns

from libs.DataConnector import DataConnector
from libs.FileFactory import JsonFileFactory
from model.Booking import Booking
from model.Customer import Customer
from model.Room import Room
from ui.HomePageMainWindowEx import HomePageMainWindowEx
from ui.MainWindowInvoicesEx import MainWindowInvoicesEx
from ui.MainWindowManagement import Ui_MainWindow


class MainWindowManagementEx(Ui_MainWindow, QMainWindow):
    def __init__(self):
        super().__init__()
        self.dc = DataConnector()
        self.customers = []
        self.rooms = []
        self.bookings = []
        self.jff = JsonFileFactory()
        self.customer_filename = "D:/FinalProject/dataset/customers.json"
        self.booking_filename = "D:/FinalProject/dataset/bookings.json"
        self.room_filename = "../../dataset/rooms.json"

        self.setupUi(self)
        self.configure_table_appearance()  # üîπ C·∫•u h√¨nh b·∫£ng sau khi UI ƒë√£ load
        self.load_data()  # üîπ Load d·ªØ li·ªáu t·ª´ file JSON
        self.display_rooms(QDate.currentDate())  # üîπ G·ªçi hi·ªÉn th·ªã ph√≤ng sau khi UI s·∫µn s√†ng
        self.setupSignalAndSlot()

    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.MainWindow = MainWindow
        self.setupSignalAndSlot()
        self.load_data()
        self.configure_table_appearance()

    def showWindow(self):
        self.MainWindow.show()

    def setupSignalAndSlot(self):
        self.pushButton_Save.clicked.connect(self.save_data)
        self.pushButton_Logout.clicked.connect(self.logout)
        self.dateEdit_date.dateChanged.connect(self.update_room_status)
        self.pushButton_vip.clicked.connect(self.sort_vip)
        self.pushButton_regular.clicked.connect(self.sort_regular)
        self.pushButton_all.clicked.connect(self.sort_all)
        self.pushButton_booked.clicked.connect(self.sort_booked)
        self.pushButton_vacant.clicked.connect(self.sort_vacant)
        self.pushButton_checkin.clicked.connect(self.process_checkin)
        self.pushButton_checkout.clicked.connect(self.process_checkout)
        self.tableWidget.itemClicked.connect(self.display_selected_row_data)
        self.pushButtonUpdate.clicked.connect(self.update_selected_row)
        self.pushButtonDelete.clicked.connect(self.delete_selected_row)
        self.pushButtonsearch.clicked.connect(self.search_booking)
        self.pushButton_Clear.clicked.connect(self.clear_reservation_data)
        self.pushButtonReport.clicked.connect(self.show_report)

    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ JSON v√† c·∫≠p nh·∫≠t b·∫£ng."""
        self.customers = self.jff.read_data(self.customer_filename, Customer) or []
        self.bookings = self.jff.read_data(self.booking_filename, Booking) or []
        self.rooms = self.jff.read_data(self.room_filename, Room) or []
        self.display_data()

    def display_data(self):
        """Hi·ªÉn th·ªã d·ªØ li·ªáu kh√°ch h√†ng v√† ƒë·∫∑t ph√≤ng tr√™n b·∫£ng v·ªõi k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh."""
        self.tableWidget.clearContents()

        total_rows = max(len(self.customers), len(self.bookings))
        self.tableWidget.setRowCount(total_rows)
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setHorizontalHeaderLabels(["Name", "Phone", "Email", "Check-in", "Check-out", "Room code"])

        for row in range(total_rows):
            # üîπ Hi·ªÉn th·ªã s·ªë th·ª© t·ª± (STT) ·ªü c·ªôt ƒë·∫ßu ti√™n
            self.tableWidget.setVerticalHeaderItem(row, QTableWidgetItem(str(row + 1)))

            customer = self.customers[row] if row < len(self.customers) else None
            if customer:
                self.set_table_item(row, 0, customer.customer_name)
                self.set_table_item(row, 1, customer.customer_phone)
                self.set_table_item(row, 2, customer.customer_email)
            else:
                for col in range(3):
                    self.set_table_item(row, col, "N/A")

            booking = next((b for b in self.bookings if customer and b.customer_code == customer.customer_code), None)
            if booking:
                self.set_table_item(row, 3, booking.start_date)
                self.set_table_item(row, 4, booking.end_date)

                room = next((r for r in self.rooms if r.room_code == booking.room_code), None)
                self.set_table_item(row, 5, room.room_code if room else "N/A")
            else:
                for col in range(3, 6):
                    self.set_table_item(row, col, "N/A")

        # üîπ C·ªë ƒë·ªãnh k√≠ch th∆∞·ªõc c·ªôt (ƒë∆°n v·ªã: pixel)
        self.tableWidget.setColumnWidth(0, 100)  # Name
        self.tableWidget.setColumnWidth(1, 100)  # Phone
        self.tableWidget.setColumnWidth(2, 180)  # Email
        self.tableWidget.setColumnWidth(3, 100)  # Check-in
        self.tableWidget.setColumnWidth(4, 100)  # Check-out
        self.tableWidget.setColumnWidth(5, 100)  # Room code

        # üîπ C·ªë ƒë·ªãnh k√≠ch th∆∞·ªõc h√†ng (cao h∆°n ƒë·ªÉ d·ªÖ nh√¨n)
        self.tableWidget.verticalHeader().setDefaultSectionSize(40)

        # üîπ CƒÉn gi·ªØa n·ªôi dung c·ªßa b·∫£ng
        for row in range(self.tableWidget.rowCount()):
            for col in range(self.tableWidget.columnCount()):
                item = self.tableWidget.item(row, col)
                if item:
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)

        # üîπ T·∫Øt t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ƒë·ªÉ gi·ªØ c·ªë ƒë·ªãnh
        self.tableWidget.horizontalHeader().setStretchLastSection(False)

    def display_selected_row_data(self, item):
        """Hi·ªÉn th·ªã th√¥ng tin c·ªßa h√†ng ƒë∆∞·ª£c ch·ªçn l√™n c√°c √¥ b√™n tr√°i"""
        row = item.row()  # L·∫•y s·ªë h√†ng ƒë∆∞·ª£c ch·ªçn

        # L·∫•y d·ªØ li·ªáu t·ª´ t·ª´ng c·ªôt c·ªßa h√†ng
        customer_name = self.tableWidget.item(row, 0).text()
        phone = self.tableWidget.item(row, 1).text()
        email = self.tableWidget.item(row, 2).text()
        checkin_date = self.tableWidget.item(row, 3).text()
        checkout_date = self.tableWidget.item(row, 4).text()
        room_code = self.tableWidget.item(row, 5).text()
        customer_code = ""
        for customer in self.customers:  # Duy·ªát danh s√°ch ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng
            if customer.customer_name == customer_name:  # So s√°nh thu·ªôc t√≠nh
                customer_code = customer.customer_code  # L·∫•y m√£ kh√°ch h√†ng
                break  # Tho√°t v√≤ng l·∫∑p n·∫øu t√¨m th·∫•y
        # Hi·ªÉn th·ªã d·ªØ li·ªáu l√™n c√°c √¥ nh·∫≠p b√™n tr√°i
        self.lineEdit_CusCode2.setText(customer_code)
        self.lineEdit_Phone_2.setText(phone)
        self.lineEditCusName2.setText(customer_name)
        self.lineEdit_CusEmail2.setText(email)
        self.lineEdit_CheckIn.setText(checkin_date)
        self.lineEdit_CheckOut.setText(checkout_date)
        self.lineEdit_RoomCodeB.setText(room_code)

    def update_selected_row(self):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªßa h√†ng ƒëang ch·ªçn m√† kh√¥ng x√≥a h√†ng c≈©, ƒë·ªìng th·ªùi l∆∞u v√†o dataset."""

        selected_row = self.tableWidget.currentRow()
        if selected_row < 0:
            QMessageBox.warning(self, "Error", "Please choose a row to update!")
            return

        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c √¥ nh·∫≠p
        customer_code = self.lineEdit_CusCode2.text().strip()  # Gi·ªØ nguy√™n customer_code
        customer_name = self.lineEditCusName2.text().strip()
        phone = self.lineEdit_Phone_2.text().strip()
        email = self.lineEdit_CusEmail2.text().strip()
        checkin_date = self.lineEdit_CheckIn.text().strip()
        checkout_date = self.lineEdit_CheckOut.text().strip()
        room_code = self.lineEdit_RoomCodeB.text().strip()

        # C·∫≠p nh·∫≠t d·ªØ li·ªáu tr√™n giao di·ªán b·∫£ng (tableWidget)
        self.tableWidget.setItem(selected_row, 0, QTableWidgetItem(customer_name))
        self.tableWidget.setItem(selected_row, 1, QTableWidgetItem(phone))
        self.tableWidget.setItem(selected_row, 2, QTableWidgetItem(email))
        self.tableWidget.setItem(selected_row, 3, QTableWidgetItem(checkin_date))
        self.tableWidget.setItem(selected_row, 4, QTableWidgetItem(checkout_date))
        self.tableWidget.setItem(selected_row, 5, QTableWidgetItem(room_code))

        # C·∫≠p nh·∫≠t dataset (customer.json & booking.json)
        self.update_json_after_update(customer_code, customer_name, phone, email, checkin_date, checkout_date,
                                      room_code)

        QMessageBox.information(self, "Successful", "Data is updated!")
        self.load_data()  # Reload d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£ng c·∫≠p nh·∫≠t

    def update_json_after_update(self, customer_code, customer_name, phone, email, checkin_date, checkout_date,
                                 room_code):
        """C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng v√† ƒë·∫∑t ph√≤ng trong JSON m√† kh√¥ng x√≥a d·ªØ li·ªáu"""
        try:
            updated_customers = []
            updated_bookings = []

            # --- C·∫¨P NH·∫¨T CUSTOMER.JSON ---
            if os.path.exists(self.customer_filename):
                with open(self.customer_filename, "r", encoding="utf-8") as file:
                    customers = json.load(file)

                for customer in customers:
                    if customer["customer_code"] == customer_code:
                        # C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
                        customer["customer_name"] = customer_name
                        customer["customer_phone"] = phone
                        customer["customer_email"] = email
                    updated_customers.append(customer)  # Gi·ªØ l·∫°i kh√°ch h√†ng kh√°c

                # Ghi l·∫°i file customer.json ƒë√£ c·∫≠p nh·∫≠t
                with open(self.customer_filename, "w", encoding="utf-8") as file:
                    json.dump(updated_customers, file, indent=4, ensure_ascii=False)

            # --- C·∫¨P NH·∫¨T BOOKING.JSON ---
            if os.path.exists(self.booking_filename):
                with open(self.booking_filename, "r", encoding="utf-8") as file:
                    bookings = json.load(file)

                for booking in bookings:
                    if booking["customer_code"] == customer_code:
                        # C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t ph√≤ng
                        booking["start_date"] = checkin_date
                        booking["end_date"] = checkout_date
                        booking["room_code"] = room_code
                    updated_bookings.append(booking)  # Gi·ªØ l·∫°i c√°c booking kh√°c

                # Ghi l·∫°i file booking.json ƒë√£ c·∫≠p nh·∫≠t
                with open(self.booking_filename, "w", encoding="utf-8") as file:
                    json.dump(updated_bookings, file, indent=4, ensure_ascii=False)

        except Exception as e:
            print(f"Error when updating JSON file: {e}")

    def delete_selected_row(self):
        """X√≥a kh√°ch h√†ng kh·ªèi b·∫£ng v√† c·∫≠p nh·∫≠t JSON"""
        selected_row = self.tableWidget.currentRow()

        if selected_row < 0:
            return  # Kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c ch·ªçn

        # L·∫•y customer_name c·ªßa kh√°ch h√†ng c·∫ßn x√≥a t·ª´ c·ªôt trong b·∫£ng
        customer_code = self.lineEdit_CusCode2.text()  # Gi·∫£ s·ª≠ c·ªôt 0 ch·ª©a customer_name

        # X√≥a d√≤ng kh·ªèi giao di·ªán b·∫£ng
        self.tableWidget.removeRow(selected_row)

        # T√¨m customer_code t·ª´ customer_name, sau ƒë√≥ c·∫≠p nh·∫≠t JSON
        self.update_json_after_delete(customer_code)
        self.clear_customer_details()
        # C·∫≠p nh·∫≠t l·∫°i b·∫£ng ph√≤ng (Room Management) ƒë·ªÉ x√≥a th√¥ng tin kh√°ch h√†ng kh·ªèi ph√≤ng
        self.display_rooms(self.dateEdit_date.date())

    def clear_customer_details(self):
        """X√≥a th√¥ng tin kh√°ch h√†ng tr√™n giao di·ªán"""
        self.lineEdit_CusCode2.clear()
        self.lineEditCusName2.clear()

        self.lineEdit_Phone_2.clear()
        self.lineEdit_CheckIn.clear()
        self.lineEdit_CheckOut.clear()
        self.lineEdit_Cusname.clear()
        self.lineEdit_RoomCodeB.clear()
        self.lineEdit_CusEmail2.clear()

    def update_json_after_delete(self, customer_code):
        """X√≥a kh√°ch h√†ng & ƒë·∫∑t ph√≤ng li√™n quan d·ª±a tr√™n customer_code"""
        try:
            updated_customers = []
            updated_bookings = []

            # üîπ X·ª≠ l√Ω customers.json
            if os.path.exists(self.customer_filename):
                with open(self.customer_filename, "r", encoding="utf-8") as file:
                    customers = json.load(file)

                # L·ªçc danh s√°ch, gi·ªØ l·∫°i kh√°ch h√†ng kh√¥ng tr√πng customer_code
                updated_customers = [customer for customer in customers if customer["customer_code"] != customer_code]

                # Ghi l·∫°i file customers.json ƒë√£ c·∫≠p nh·∫≠t
                with open(self.customer_filename, "w", encoding="utf-8") as file:
                    json.dump(updated_customers, file, indent=4, ensure_ascii=False)

            # üîπ X·ª≠ l√Ω bookings.json
            if os.path.exists(self.booking_filename):
                with open(self.booking_filename, "r", encoding="utf-8") as file:
                    bookings = json.load(file)

                # L·ªçc danh s√°ch booking, gi·ªØ l·∫°i c√°c booking kh√¥ng tr√πng customer_code
                updated_bookings = [b for b in bookings if b["customer_code"] != customer_code]

                # Ghi l·∫°i file bookings.json ƒë√£ c·∫≠p nh·∫≠t
                with open(self.booking_filename, "w", encoding="utf-8") as file:
                    json.dump(updated_bookings, file, indent=4, ensure_ascii=False)

            # üîπ C·∫≠p nh·∫≠t l·∫°i giao di·ªán sau khi x√≥a
            self.load_data()  # Load l·∫°i d·ªØ li·ªáu m·ªõi
            self.display_rooms(self.dateEdit_date.date())  # Hi·ªÉn th·ªã l·∫°i danh s√°ch ph√≤ng

        except Exception as e:
            print(f"Error when updating JSON file: {e}")

    def search_booking(self):
        """T√¨m ki·∫øm th√¥ng tin kh√°ch h√†ng theo Customer Code -> L·∫•y Customer Name -> Hi·ªÉn th·ªã d√≤ng ph√π h·ª£p."""
        cuscode = self.lineEdit_CusCode2.text().strip().lower()  # L·∫•y m√£ kh√°ch h√†ng t·ª´ √¥ nh·∫≠p

        if not cuscode:  # N·∫øu kh√¥ng nh·∫≠p g√¨ th√¨ hi·ªÉn th·ªã t·∫•t c·∫£ d√≤ng
            for row in range(self.tableWidget.rowCount()):
                self.tableWidget.showRow(row)
            return

        # T√¨m Customer Name d·ª±a tr√™n Customer Code trong dataset (gi·∫£ s·ª≠ self.customers ch·ª©a d·ªØ li·ªáu)
        customer_name = None
        for customer in self.customers:
            if customer.customer_code.lower() == cuscode:
                customer_name = customer.customer_name
                break

        if not customer_name:  # N·∫øu kh√¥ng t√¨m th·∫•y m√£ kh√°ch h√†ng, ·∫©n h·∫øt c√°c d√≤ng
            for row in range(self.tableWidget.rowCount()):
                self.tableWidget.hideRow(row)
            return

        # Duy·ªát b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã d√≤ng c√≥ Customer Name kh·ªõp
        for row in range(self.tableWidget.rowCount()):
            cusname_item = self.tableWidget.item(row, 0)  # C·ªôt 0 ch·ª©a Customer Name

            if cusname_item and cusname_item.text().lower() == customer_name.lower():
                self.tableWidget.showRow(row)  # Hi·ªÉn th·ªã d√≤ng t√¨m th·∫•y
            else:
                self.tableWidget.hideRow(row)  # ·∫®n d√≤ng kh√¥ng kh·ªõp

    def logout(self):
        reply = QMessageBox.question(self.MainWindow, "Logout", "Are you sure?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            self.MainWindow.close()  # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i

            # M·ªü l·∫°i m√†n h√¨nh ch√≠nh (HomePageMainWindowEx)
            self.mainwindow = QMainWindow()
            self.myui = HomePageMainWindowEx()
            self.myui.setupUi(self.mainwindow)
            self.myui.showWindow()

    def set_table_item(self, row, col, text):
        """Thi·∫øt l·∫≠p √¥ ch·ªâ ƒë·ªçc v·ªõi n·ªôi dung c·ª• th·ªÉ."""
        item = QTableWidgetItem(text)
        item.setFlags(Qt.ItemFlag.ItemIsEnabled)
        self.tableWidget.setItem(row, col, item)

    def configure_table_appearance(self):
        self.tableWidget_Room.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.tableWidget_Room.verticalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)

    def display_rooms(self, selected_date, rooms_to_display=None):
        self.tableWidget_Room.clearContents()
        rooms_to_display = rooms_to_display or self.rooms
        self.selected_rooms = rooms_to_display
        self.tableWidget_Room.setRowCount(len(rooms_to_display))

        for row, room in enumerate(rooms_to_display):
            items = [
                QTableWidgetItem(room.room_code),
                QTableWidgetItem("Booked" if self.is_room_booked(str(room.room_code), selected_date) else "Ready"),
                QTableWidgetItem(self.get_customer_code_for_room(str(room.room_code), selected_date) or "N/A"),
                QTableWidgetItem(room.room_type)
            ]

            status_color = QColor(255, 145, 144) if items[1].text() == "Booked" else QColor(207, 244, 210)
            for col in range(4):
                items[col].setBackground(QBrush(status_color))
                items[col].setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                self.tableWidget_Room.setItem(row, col, items[col])

    def is_room_booked(self, room_code, selected_date):
        selected_datetime = datetime(
            selected_date.year(),
            selected_date.month(),
            selected_date.day()
        )

        for booking in self.bookings:
            if booking.room_code == room_code:
                try:
                    # üîπ Ch·ªâ h·ªó tr·ª£ ƒë·ªãnh d·∫°ng "yyyy/M/d"
                    start_date = datetime.strptime(booking.start_date, "%Y/%m/%d") if isinstance(booking.start_date,
                                                                                                 str) else booking.start_date
                    end_date = datetime.strptime(booking.end_date, "%Y/%m/%d") if isinstance(booking.end_date,
                                                                                             str) else booking.end_date

                    if start_date <= selected_datetime <= end_date:
                        return True
                except ValueError as e:
                    print(f"‚ö† Invalid date format in booking: {booking.start_date}, {booking.end_date} - {e}")
                    continue

        return False

    def get_customer_code_for_room(self, room_code, selected_date):
        """L·∫•y customer_code c·ªßa kh√°ch h√†ng trong kho·∫£ng th·ªùi gian ƒë·∫∑t ph√≤ng"""
        selected_datetime = datetime(selected_date.year(), selected_date.month(), selected_date.day())

        # L·∫•y danh s√°ch customer_code t·ª´ danh s√°ch ƒë·ªëi t∆∞·ª£ng Customer
        valid_customer_codes = {c.customer_code for c in self.customers}

        for booking in self.bookings:
            if booking.room_code == room_code:
                try:
                    # Chuy·ªÉn ƒë·ªïi ng√†y t·ª´ chu·ªói sang datetime n·∫øu c·∫ßn
                    start_date = datetime.strptime(booking.start_date, "%Y/%m/%d") if isinstance(booking.start_date,
                                                                                                 str) else booking.start_date
                    end_date = datetime.strptime(booking.end_date, "%Y/%m/%d") if isinstance(booking.end_date,
                                                                                             str) else booking.end_date

                    # Ki·ªÉm tra ng√†y h·ª£p l·ªá v√† customer_code t·ªìn t·∫°i
                    if start_date <= selected_datetime <= end_date and booking.customer_code in valid_customer_codes:
                        return booking.customer_code

                except ValueError as e:
                    print(f"Invalid date format in booking: {booking.start_date}, {booking.end_date} - {e}")
                    continue

        return None  # Kh√¥ng t√¨m th·∫•y customer_code h·ª£p l·ªá

    def sort_vacant(self):
        """L·ªçc c√°c ph√≤ng c√≤n tr·ªëng"""
        vacant_rooms = [room for room in self.rooms
                        if not self.is_room_booked(room.room_code, self.dateEdit_date.date())]
        self.display_rooms(self.dateEdit_date.date(), vacant_rooms)

    def update_room_status(self):
        selected_date = self.dateEdit_date.date()
        self.display_rooms(selected_date, self.selected_rooms)

    def sort_vip(self):
        vip_rooms = [room for room in self.rooms if room.room_type == "VIP"]
        self.display_rooms(self.dateEdit_date.date(), vip_rooms)

    def sort_regular(self):
        regular_rooms = [room for room in self.rooms if room.room_type == "Regular"]
        self.display_rooms(self.dateEdit_date.date(), regular_rooms)

    def sort_all(self):
        self.display_rooms(self.dateEdit_date.date())

    def sort_booked(self):
        """L·ªçc c√°c ph√≤ng ƒëang ƒë∆∞·ª£c ƒë·∫∑t"""
        booked_rooms = [room for room in self.rooms
                        if self.is_room_booked(room.room_code, self.dateEdit_date.date())]
        self.display_rooms(self.dateEdit_date.date(), booked_rooms)

    def process_checkin(self):
        selected_items = self.tableWidget_Room.selectedItems()
        if not selected_items:
            self.show_error_message("Please select a room to check in")
            return

        row = selected_items[0].row()
        room_code_item = self.tableWidget_Room.item(row, 0)
        status_item = self.tableWidget_Room.item(row, 1)
        customer_item = self.tableWidget_Room.item(row, 2)
        roomtype_item = self.tableWidget_Room.item(row, 3)

        if not room_code_item or not status_item or not customer_item:
            self.show_error_message("Error retrieving room information.")
            return

        if status_item.text() == "Booked":
            self.show_error_message("This room has already been booked.")
            return

        room_code = room_code_item.text()
        confirm = QMessageBox.question(
            self.MainWindow,
            "Check-in Confirmation",
            f"Do you confirm the check-in for room {room_code}?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if confirm == QMessageBox.StandardButton.Yes:
            # ‚úÖ Hi·ªÉn th·ªã h·ªôp tho·∫°i ƒë·ªÉ nh·∫≠p Customer ID
            new_customer_id, ok = QInputDialog.getText(self, "Enter Customer ID", "Customer ID:")

            if not ok or not new_customer_id.strip():  # N·∫øu b·∫•m "H·ªßy" ho·∫∑c ƒë·ªÉ tr·ªëng
                self.show_error_message("Please enter a valid Customer ID.")
                return

            new_customer_id = new_customer_id.strip()

            status_item.setText("Booked")
            customer_item.setText(new_customer_id)

            # ƒê·ªïi m√†u n·ªÅn th√†nh ƒë·ªè
            red_color = QColor(255, 145, 144)
            status_item.setBackground(QBrush(red_color))
            customer_item.setBackground(QBrush(red_color))
            room_code_item.setBackground(QBrush(red_color))
            roomtype_item.setBackground(QBrush(red_color))

            QMessageBox.information(self.MainWindow, "Success", "Check-in Successfully!")

    def get_selected_room_code(self):
        """L·∫•y room_code t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn trong b·∫£ng."""
        selected_row = self.tableWidget_Room.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, "Error", "Please select a room!")
            return None

        room_item = self.tableWidget_Room.item(selected_row, 0)  # L·∫•y room_code ·ªü c·ªôt ƒë·∫ßu ti√™n
        if not room_item:
            QMessageBox.warning(self, "Error", "No room code found in this row!")
            return None

        return room_item.text()

    def process_checkout(self):
        selected_items = self.tableWidget_Room.selectedItems()
        if not selected_items:
            self.show_error_message("Please select a room to check out.")
            return

        row = selected_items[0].row()
        room_code_item = self.tableWidget_Room.item(row, 0)
        status_item = self.tableWidget_Room.item(row, 1)
        customer_item = self.tableWidget_Room.item(row, 2)
        roomtype_item = self.tableWidget_Room.item(row, 3)

        if not room_code_item or not status_item or not customer_item:
            self.show_error_message("Error retrieving room information.")
            return

        if status_item.text() != "Booked":
            self.show_error_message("This room is available.")
            return

        room_code = room_code_item.text()
        customer_code = customer_item.text()  # L·∫•y m√£ kh√°ch tr∆∞·ªõc khi c·∫≠p nh·∫≠t

        # N·∫øu ph√≤ng ch∆∞a c√≥ kh√°ch, kh√¥ng th·ª±c hi·ªán check-out
        if customer_code == "N/A":
            self.show_error_message("No valid customer found for this room.")
            return

        confirm = QMessageBox.question(
            self.MainWindow,
            "Confirm Check-out",
            f"Confirm check-out for room {room_code}?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if confirm == QMessageBox.StandardButton.Yes:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
            status_item.setText("Ready")
            customer_item.setText("N/A")

            # ƒê·ªïi m√†u n·ªÅn th√†nh xanh l√°
            green_color = QColor(207, 244, 210)
            for item in [status_item, customer_item, room_code_item, roomtype_item]:
                if item:
                    item.setBackground(QBrush(green_color))

            # G·ªçi h√≥a ƒë∆°n n·∫øu c√≥ kh√°ch
            self.show_invoice_window(room_code, customer_code)

    def show_invoice_window(self, room_code, customer_code):
        """Hi·ªÉn th·ªã giao di·ªán h√≥a ƒë∆°n (c·∫ßn thay th·∫ø b·∫±ng giao di·ªán th·ª±c t·∫ø c·ªßa b·∫°n)."""
        # V√≠ d·ª•:
        self.invoice_window = MainWindowInvoicesEx(room_code, customer_code)
        self.invoice_window.show()

    def show_error_message(self, message):
        QMessageBox.critical(self.MainWindow, "ERROR", message)

    def save_data(self):
        """L∆∞u d·ªØ li·ªáu v√†o JSON v√† ki·ªÉm tra ph√≤ng tr·ªëng tr∆∞·ªõc khi c·∫≠p nh·∫≠t b·∫£ng"""
        try:
            customer_code = self.lineEdit_Cuscode.text().strip()
            customer_phone = self.lineEdit_Phone.text().strip()
            customer_name = self.lineEdit_Cusname.text().strip()
            customer_email = self.lineEdit_Email.text().strip()
            customer_identity = self.lineEdit_Identify.text().strip()
            room_code = self.lineEdit_Roomcode.text().strip()
            start_date = self.CheckIn.text().strip()
            end_date = self.CheckOut.text().strip()

            # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
            if not customer_code or not customer_name or not room_code:
                QMessageBox.warning(self.MainWindow, "Warning",
                                    "Customer Code, Customer Name, and Room Code cannot be empty!")
                return

            customers = self.jff.read_data(self.customer_filename, Customer)
            bookings = self.jff.read_data(self.booking_filename, Booking)

            # Chuy·ªÉn ƒë·ªïi ng√†y th√†nh d·∫°ng datetime ƒë·ªÉ so s√°nh
            start_date_dt = datetime.strptime(start_date, "%Y/%m/%d")
            end_date_dt = datetime.strptime(end_date, "%Y/%m/%d")

            # Ki·ªÉm tra xem ph√≤ng ƒë√£ c√≥ ƒë·∫∑t tr∆∞·ªõc ch∆∞a
            for booking in bookings:
                if booking.room_code == room_code:
                    booked_start = datetime.strptime(booking.start_date, "%Y/%m/%d")
                    booked_end = datetime.strptime(booking.end_date, "%Y/%m/%d")

                    # N·∫øu ng√†y ƒë·∫∑t ph√≤ng m·ªõi b·ªã tr√πng v·ªõi kho·∫£ng th·ªùi gian ƒë√£ c√≥
                    if not (end_date_dt < booked_start or start_date_dt > booked_end):
                        QMessageBox.warning(self.MainWindow, "Warning", "Room is already booked for this period!")
                        return  # D·ª´ng l∆∞u n·∫øu ph√≤ng ƒë√£ c√≥ kh√°ch

            # N·∫øu ph√≤ng tr·ªëng, t·∫°o booking m·ªõi
            booking = Booking(customer_code, room_code, start_date, end_date)
            bookings.append(booking)

            # Ki·ªÉm tra xem kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing_customer = next((c for c in customers if c.customer_code == customer_code), None)
            if not existing_customer:
                c = Customer(customer_code, customer_name, customer_phone, customer_email, customer_identity)
                customers.append(c)

            # L∆∞u d·ªØ li·ªáu v√†o file JSON
            self.jff.write_data(customers, self.customer_filename)
            self.jff.write_data(bookings, self.booking_filename)

            QMessageBox.information(self.MainWindow, "Successful", "Data was saved!")
            self.load_data()

        except Exception as e:
            QMessageBox.critical(self.MainWindow, "Error", f"Error saving data:\n{str(e)}")

    def clear_reservation_data(self):
        """ X√≥a n·ªôi dung c·ªßa c√°c √¥ nh·∫≠p li·ªáu """
        self.lineEdit_Cuscode.clear()
        self.lineEdit_Phone.clear()
        self.lineEdit_Cusname.clear()
        self.lineEdit_Email.clear()
        self.lineEdit_Identify.clear()

        self.lineEdit_Roomcode.clear()
        self.lineEdit_Requirement.clear()

    def show_report(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Question)
        msg.setWindowTitle("Select Report Type")
        msg.setText("How would you like to view the report?")

        # T·∫°o c√°c n√∫t b·∫•m
        barchart_button = msg.addButton("Barchart", QMessageBox.ButtonRole.AcceptRole)
        heatmap_button = msg.addButton("Heatmap", QMessageBox.ButtonRole.RejectRole)
        cancel_button = msg.addButton("Cancel", QMessageBox.ButtonRole.NoRole)

        msg.exec()  # Hi·ªÉn th·ªã h·ªôp tho·∫°i

        # Ki·ªÉm tra n√∫t n√†o ƒë∆∞·ª£c b·∫•m
        if msg.clickedButton() == barchart_button:
            self.open_booking_report()
        elif msg.clickedButton() == heatmap_button:
            self.open_heatmap_report()

    def open_booking_report(self):
        from RoomBookingReport.MainWindowEx import MainWindowEx
        self.report_window = MainWindowEx()  # T·∫°o m·ªôt th·ªÉ hi·ªán c·ªßa c·ª≠a s·ªï
        self.report_window.show()  # Hi·ªÉn th·ªã c·ª≠a s·ªï

    def open_heatmap_report(self):
        # Top 8 countries visiting Maldives Hotels
        countries = ['China', 'India', 'Russia', 'Germany', 'United Kingdom',
                     'Italy', 'United States', 'France']

        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

        # Generate random data for hotel visitors
        np.random.seed(42)
        customer_data = pd.DataFrame(np.random.randint(500, 5000, size=(8, 12)), index=countries, columns=months)

        # Sort by total number of visitors
        customer_data["Total"] = customer_data.sum(axis=1)
        customer_data = customer_data.sort_values(by="Total", ascending=False)
        customer_data = customer_data.drop(columns=["Total"])  # Remove the total column after sorting

        # Custom colormap
        custom_cmap = LinearSegmentedColormap.from_list("custom_palette", [
            '#dbdcd7', '#dddcd7', '#e2c9cc', '#e7627d',
            '#b8235a', '#801357', '#3d1635', '#1c1a27'
        ])

        # Plot heatmap
        plt.figure(figsize=(12, 8))
        sns.heatmap(customer_data, annot=True, fmt='d', linewidths=.5, cmap=custom_cmap)

        plt.title('Top 8 Countries Visiting Maldives Hotels Over 12 Months', fontsize=14)
        plt.xlabel('Months', fontsize=12)
        plt.ylabel('Country', fontsize=12)
        plt.xticks(rotation=45)  # Rotate month labels for better readability
        plt.show()